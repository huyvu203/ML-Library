name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.12']

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # fetch all history for proper versioning
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.2.2
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install --no-interaction --with dev
      
    - name: Lint with flake8
      run: poetry run flake8 ml_library tests
      
    - name: Format check with black
      run: poetry run black --check ml_library tests
      
    - name: Type check with mypy
      run: poetry run mypy ml_library
      
    - name: Security check with bandit
      run: poetry run bandit -r ml_library
      
    - name: Test with pytest
      run: poetry run pytest --cov=ml_library --cov-report=xml --cov-report=term
      
    - name: Check coverage threshold
      id: check_coverage
      run: |
        COVERAGE=$(poetry run coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
        echo "Test coverage: $COVERAGE%"
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        if (( $(echo "$COVERAGE < 85" | bc -l) )); then
          echo "Coverage below threshold of 85%"
          exit 1
        fi
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        
    - name: Publish test summary
      if: ${{ always() }}
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Coverage: ${{ steps.check_coverage.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.2.2
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction --with dev
    
    # Run pre-commit hooks on all files
    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0
    
    # Run SonarCloud scan
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=ml_library
          -Dsonar.organization=your-sonar-organization
          -Dsonar.python.coverage.reportPaths=coverage.xml

  docs:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.2.2
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install --no-interaction --with dev
      
    - name: Build documentation
      run: |
        cd docs
        poetry run sphinx-build -b html . _build/html
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  publish:
    runs-on: ubuntu-latest
    needs: [test, code-quality, docs]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.2.2
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install --no-interaction --with dev
      
    - name: Build package
      run: poetry build
      
    - name: Publish to PyPI
      run: poetry publish
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
