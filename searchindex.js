Search.setIndex({"docnames": ["api/config", "api/evaluation", "api/index", "api/inference", "api/models", "api/training", "api/utils", "index"], "filenames": ["api/config.rst", "api/evaluation.rst", "api/index.rst", "api/inference.rst", "api/models.rst", "api/training.rst", "api/utils.rst", "index.rst"], "titles": ["Configuration", "Evaluation", "API Reference", "Inference", "Models", "Training", "Utilities", "ML Library Documentation"], "terms": {"load": [0, 3, 4], "util": [0, 2, 7], "class": [0, 1, 3, 4, 5], "ml_librari": [0, 1, 3, 4, 5, 6], "configload": 0, "sourc": [0, 1, 3, 4, 5, 6], "base": [0, 1, 2, 3, 5], "object": [0, 1, 3, 5], "yaml": 0, "json": 0, "file": [0, 3, 4, 6], "classmethod": [0, 4], "file_path": [0, 3, 4], "from": [0, 3, 4, 5], "either": [0, 3], "extens": 0, "paramet": [0, 1, 3, 4, 5, 6], "union": [0, 3, 4, 6], "str": [0, 1, 3, 4, 5, 6], "path": [0, 3, 4, 6], "return": [0, 1, 3, 4, 5, 6], "type": [0, 1, 3, 4, 5, 6], "dict": [0, 1, 3, 4, 5], "ani": [0, 4, 5], "contain": 0, "rais": [0, 3, 4], "valueerror": [0, 3, 4], "If": [0, 3, 4, 6], "i": [0, 4, 6], "support": [0, 2, 3], "static": 0, "load_json": 0, "filenotfounderror": [0, 3, 4], "doesn": [0, 3, 4], "t": [0, 3, 4], "exist": [0, 3, 4], "jsondecodeerror": 0, "valid": [0, 5], "load_yaml": 0, "yamlerror": 0, "implement": [1, 3, 4, 5], "model": [1, 2, 3, 5, 7], "basemetr": 1, "calcul": 1, "y_true": 1, "y_pred": 1, "ndarrai": [1, 3, 4, 5], "true": [1, 4], "target": [1, 4, 5], "valu": [1, 3, 4, 5], "predict": [1, 3, 4], "float": [1, 3, 4], "name": [1, 3], "classificationmetr": 1, "averag": [1, 4], "binari": 1, "classif": [1, 3, 4], "y_prob": 1, "none": [1, 3, 4, 5, 6], "perform": 1, "label": [1, 4], "option": [1, 3, 5, 6], "probabl": [1, 3, 4], "roc": 1, "auc": 1, "accuraci": [1, 4], "score": [1, 4], "precis": 1, "recal": 1, "f1": 1, "confusion_matrix": 1, "confus": 1, "matrix": 1, "roc_auc": 1, "provid": [1, 3, 5], "includ": [1, 3, 5], "regressionmetr": 1, "regress": [1, 2], "mae": 1, "mean": 1, "absolut": 1, "error": 1, "mse": 1, "squar": 1, "rmse": 1, "root": 1, "r2": 1, "r": [1, 4], "linear": 2, "logist": 2, "tree": 2, "random": 2, "forest": 2, "xgboost": 2, "vector": 2, "machin": [2, 5, 7], "k": 2, "nearest": 2, "neighbor": 2, "train": [2, 3, 4, 7], "trainer": 2, "infer": [2, 7], "predictor": 2, "evalu": [2, 7], "metric": [2, 4, 5], "configur": [2, 6, 7], "config": 2, "loader": 2, "logger": 2, "make": [3, 4], "thi": [3, 4, 5], "function": [3, 4, 5], "batch": 3, "process": [3, 5], "result": 3, "format": [3, 6], "explain_feature_import": 3, "feature_nam": 3, "get": [3, 4, 5, 6], "featur": [3, 5], "import": 3, "list": 3, "sort": 3, "load_predict": 3, "save": [3, 4], "The": [3, 4, 5], "x": [3, 4, 5], "return_prob": 3, "fals": 3, "input": [3, 4], "data": [3, 4, 5], "bool": [3, 4], "whether": 3, "numpi": 3, "arrai": [3, 4], "predict_batch": 3, "batch_siz": 3, "1000": [3, 4], "handl": 3, "larg": 3, "dataset": 3, "int": [3, 4, 6], "number": 3, "sampl": [3, 4], "per": 3, "save_predict": 3, "where": [3, 4], "basemodel": [4, 5], "kwarg": [4, 5], "abc": 4, "abstract": 4, "all": 4, "librari": [4, 6], "defin": 4, "common": 4, "interfac": 4, "should": 4, "check_is_fit": 4, "check": 4, "ha": 4, "been": 4, "fit": 4, "y": [4, 5], "shape": 4, "n_sampl": 4, "n_featur": 4, "self": 4, "get_param": 4, "disk": 4, "linearregress": 4, "fit_intercept": 4, "learning_r": 4, "0": [4, 5], "01": 4, "n_iter": 4, "tol": 4, "0001": 4, "equat": 4, "form": 4, "coeffici": 4, "intercept": 4, "us": [4, 6], "gradient": 4, "descent": 4, "determin": 4, "2": [4, 5], "test": 4, "logisticregress": 4, "penalti": 4, "c": 4, "1": [4, 6], "classifi": 4, "optim": 4, "log": [4, 5, 6], "likelihood": 4, "can": [4, 6], "scikit": 4, "learn": [4, 5, 7], "": 4, "predict_proba": 4, "estim": 4, "both": 4, "each": 4, "given": 4, "sigmoid": 4, "z": 4, "activ": 4, "decis": 4, "tree_model": 4, "decisiontreeclassifi": 4, "max_depth": 4, "min_samples_split": 4, "min_samples_leaf": 4, "max_featur": 4, "criterion": 4, "gini": 4, "random_st": [4, 5], "task": 4, "decisiontreeregressor": 4, "squared_error": 4, "random_forest": 4, "randomforestclassifi": 4, "n_estim": 4, "100": 4, "sqrt": 4, "bootstrap": 4, "build": 4, "an": 4, "ensembl": 4, "major": 4, "vote": 4, "randomforestregressor": 4, "xgboost_model": 4, "xgboostclassifi": 4, "6": 4, "subsampl": 4, "colsample_bytre": 4, "reg_alpha": 4, "reg_lambda": 4, "boost": 4, "xgboostregressor": 4, "svm_model": 4, "svmclassifi": 4, "kernel": 4, "rbf": 4, "gamma": 4, "scale": 4, "degre": 4, "3": 4, "shrink": 4, "001": 4, "class_weight": 4, "svc": 4, "svm": 4, "svmregressor": 4, "epsilon": 4, "regressor": 4, "svr": 4, "knn_model": 4, "knnclassifi": 4, "n_neighbor": 4, "5": 4, "weight": 4, "uniform": 4, "algorithm": 4, "auto": 4, "leaf_siz": 4, "30": 4, "p": 4, "minkowski": 4, "n_job": 4, "knn": 4, "knnregressor": 4, "validation_split": 5, "split": 5, "progress": 5, "get_metr": 5, "validation_data": 5, "tupl": 5, "x_val": 5, "y_val": 5, "ml": 6, "get_logg": 6, "instanc": 6, "setup_logg": 6, "level": 6, "info": 6, "log_fil": 6, "rotat": 6, "10": 6, "mb": 6, "retent": 6, "week": 6, "string": 6, "stderr": 6, "onli": 6, "when": 6, "default": 6, "how": 6, "long": 6, "keep": 6, "A": 7, "product": 7, "readi": 7, "python": 7, "modular": 7, "compon": 7, "preprocess": 7, "api": 7, "refer": 7, "index": 7, "modul": 7, "search": 7, "page": 7}, "objects": {"ml_library.config": [[0, 0, 0, "-", "loader"]], "ml_library.config.loader": [[0, 1, 1, "", "ConfigLoader"]], "ml_library.config.loader.ConfigLoader": [[0, 2, 1, "", "load"], [0, 2, 1, "", "load_json"], [0, 2, 1, "", "load_yaml"]], "ml_library.evaluation": [[1, 0, 0, "-", "metrics"]], "ml_library.evaluation.metrics": [[1, 1, 1, "", "BaseMetrics"], [1, 1, 1, "", "ClassificationMetrics"], [1, 1, 1, "", "RegressionMetrics"]], "ml_library.evaluation.metrics.BaseMetrics": [[1, 2, 1, "", "evaluate"]], "ml_library.evaluation.metrics.ClassificationMetrics": [[1, 2, 1, "", "evaluate"]], "ml_library.evaluation.metrics.RegressionMetrics": [[1, 2, 1, "", "evaluate"]], "ml_library.inference": [[3, 0, 0, "-", "predictor"]], "ml_library.inference.predictor": [[3, 1, 1, "", "Predictor"]], "ml_library.inference.predictor.Predictor": [[3, 2, 1, "", "explain_feature_importance"], [3, 2, 1, "", "load_predictions"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "predict_batch"], [3, 2, 1, "", "save_predictions"]], "ml_library.models": [[4, 0, 0, "-", "base"], [4, 0, 0, "-", "classification"], [4, 0, 0, "-", "knn_models"], [4, 0, 0, "-", "random_forest"], [4, 0, 0, "-", "regression"], [4, 0, 0, "-", "svm_models"], [4, 0, 0, "-", "tree_models"], [4, 0, 0, "-", "xgboost_models"]], "ml_library.models.base": [[4, 1, 1, "", "BaseModel"]], "ml_library.models.base.BaseModel": [[4, 2, 1, "", "check_is_fitted"], [4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "load"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "save"]], "ml_library.models.classification": [[4, 1, 1, "", "LogisticRegression"], [4, 3, 1, "", "sigmoid"]], "ml_library.models.classification.LogisticRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "predict_proba"], [4, 2, 1, "", "score"]], "ml_library.models.knn_models": [[4, 1, 1, "", "KNNClassifier"], [4, 1, 1, "", "KNNRegressor"]], "ml_library.models.knn_models.KNNClassifier": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "predict_proba"], [4, 2, 1, "", "score"]], "ml_library.models.knn_models.KNNRegressor": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "score"]], "ml_library.models.random_forest": [[4, 1, 1, "", "RandomForestClassifier"], [4, 1, 1, "", "RandomForestRegressor"]], "ml_library.models.random_forest.RandomForestClassifier": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "predict_proba"], [4, 2, 1, "", "score"]], "ml_library.models.random_forest.RandomForestRegressor": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "score"]], "ml_library.models.regression": [[4, 1, 1, "", "LinearRegression"]], "ml_library.models.regression.LinearRegression": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "score"]], "ml_library.models.svm_models": [[4, 1, 1, "", "SVMClassifier"], [4, 1, 1, "", "SVMRegressor"]], "ml_library.models.svm_models.SVMClassifier": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "predict_proba"], [4, 2, 1, "", "score"]], "ml_library.models.svm_models.SVMRegressor": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "score"]], "ml_library.models.tree_models": [[4, 1, 1, "", "DecisionTreeClassifier"], [4, 1, 1, "", "DecisionTreeRegressor"]], "ml_library.models.tree_models.DecisionTreeClassifier": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "predict_proba"], [4, 2, 1, "", "score"]], "ml_library.models.tree_models.DecisionTreeRegressor": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "score"]], "ml_library.models.xgboost_models": [[4, 1, 1, "", "XGBoostClassifier"], [4, 1, 1, "", "XGBoostRegressor"]], "ml_library.models.xgboost_models.XGBoostClassifier": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "predict_proba"], [4, 2, 1, "", "score"]], "ml_library.models.xgboost_models.XGBoostRegressor": [[4, 2, 1, "", "fit"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "score"]], "ml_library.training": [[5, 0, 0, "-", "trainer"]], "ml_library.training.trainer": [[5, 1, 1, "", "Trainer"]], "ml_library.training.trainer.Trainer": [[5, 2, 1, "", "get_metrics"], [5, 2, 1, "", "train"]], "ml_library.utils": [[6, 0, 0, "-", "logger"]], "ml_library.utils.logger": [[6, 3, 1, "", "get_logger"], [6, 3, 1, "", "setup_logger"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"configur": 0, "config": 0, "loader": 0, "evalu": 1, "metric": 1, "api": 2, "refer": 2, "infer": 3, "predictor": 3, "model": 4, "base": 4, "linear": 4, "regress": 4, "logist": 4, "tree": 4, "random": 4, "forest": 4, "xgboost": 4, "support": 4, "vector": 4, "machin": 4, "k": 4, "nearest": 4, "neighbor": 4, "train": 5, "trainer": 5, "util": 6, "logger": 6, "ml": 7, "librari": 7, "document": 7, "content": 7, "indic": 7, "tabl": 7}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Configuration": [[0, "configuration"]], "Config Loader": [[0, "config-loader"]], "Evaluation": [[1, "evaluation"]], "Metrics": [[1, "metrics"]], "API Reference": [[2, "api-reference"]], "Inference": [[3, "inference"]], "Predictor": [[3, "predictor"]], "Models": [[4, "models"]], "Base Model": [[4, "base-model"]], "Linear Regression": [[4, "linear-regression"]], "Logistic Regression": [[4, "logistic-regression"]], "Tree-based Models": [[4, "tree-based-models"]], "Random Forest Models": [[4, "random-forest-models"]], "XGBoost Models": [[4, "xgboost-models"]], "Support Vector Machines": [[4, "support-vector-machines"]], "K-Nearest Neighbors": [[4, "k-nearest-neighbors"]], "Training": [[5, "training"]], "Trainer": [[5, "trainer"]], "Utilities": [[6, "utilities"]], "Logger": [[6, "logger"]], "ML Library Documentation": [[7, "ml-library-documentation"]], "Contents:": [[7, null]], "Indices and tables": [[7, "indices-and-tables"]]}, "indexentries": {"configloader (class in ml_library.config.loader)": [[0, "ml_library.config.loader.ConfigLoader"]], "load() (ml_library.config.loader.configloader class method)": [[0, "ml_library.config.loader.ConfigLoader.load"]], "load_json() (ml_library.config.loader.configloader static method)": [[0, "ml_library.config.loader.ConfigLoader.load_json"]], "load_yaml() (ml_library.config.loader.configloader static method)": [[0, "ml_library.config.loader.ConfigLoader.load_yaml"]], "ml_library.config.loader": [[0, "module-ml_library.config.loader"]], "module": [[0, "module-ml_library.config.loader"], [1, "module-ml_library.evaluation.metrics"], [3, "module-ml_library.inference.predictor"], [4, "module-ml_library.models.base"], [4, "module-ml_library.models.classification"], [4, "module-ml_library.models.knn_models"], [4, "module-ml_library.models.random_forest"], [4, "module-ml_library.models.regression"], [4, "module-ml_library.models.svm_models"], [4, "module-ml_library.models.tree_models"], [4, "module-ml_library.models.xgboost_models"], [5, "module-ml_library.training.trainer"], [6, "module-ml_library.utils.logger"]], "basemetrics (class in ml_library.evaluation.metrics)": [[1, "ml_library.evaluation.metrics.BaseMetrics"]], "classificationmetrics (class in ml_library.evaluation.metrics)": [[1, "ml_library.evaluation.metrics.ClassificationMetrics"]], "regressionmetrics (class in ml_library.evaluation.metrics)": [[1, "ml_library.evaluation.metrics.RegressionMetrics"]], "evaluate() (ml_library.evaluation.metrics.basemetrics method)": [[1, "ml_library.evaluation.metrics.BaseMetrics.evaluate"]], "evaluate() (ml_library.evaluation.metrics.classificationmetrics method)": [[1, "ml_library.evaluation.metrics.ClassificationMetrics.evaluate"]], "evaluate() (ml_library.evaluation.metrics.regressionmetrics method)": [[1, "ml_library.evaluation.metrics.RegressionMetrics.evaluate"]], "ml_library.evaluation.metrics": [[1, "module-ml_library.evaluation.metrics"]], "predictor (class in ml_library.inference.predictor)": [[3, "ml_library.inference.predictor.Predictor"]], "explain_feature_importance() (ml_library.inference.predictor.predictor method)": [[3, "ml_library.inference.predictor.Predictor.explain_feature_importance"]], "load_predictions() (ml_library.inference.predictor.predictor method)": [[3, "ml_library.inference.predictor.Predictor.load_predictions"]], "ml_library.inference.predictor": [[3, "module-ml_library.inference.predictor"]], "predict() (ml_library.inference.predictor.predictor method)": [[3, "ml_library.inference.predictor.Predictor.predict"]], "predict_batch() (ml_library.inference.predictor.predictor method)": [[3, "ml_library.inference.predictor.Predictor.predict_batch"]], "save_predictions() (ml_library.inference.predictor.predictor method)": [[3, "ml_library.inference.predictor.Predictor.save_predictions"]], "basemodel (class in ml_library.models.base)": [[4, "ml_library.models.base.BaseModel"]], "decisiontreeclassifier (class in ml_library.models.tree_models)": [[4, "ml_library.models.tree_models.DecisionTreeClassifier"]], "decisiontreeregressor (class in ml_library.models.tree_models)": [[4, "ml_library.models.tree_models.DecisionTreeRegressor"]], "knnclassifier (class in ml_library.models.knn_models)": [[4, "ml_library.models.knn_models.KNNClassifier"]], "knnregressor (class in ml_library.models.knn_models)": [[4, "ml_library.models.knn_models.KNNRegressor"]], "linearregression (class in ml_library.models.regression)": [[4, "ml_library.models.regression.LinearRegression"]], "logisticregression (class in ml_library.models.classification)": [[4, "ml_library.models.classification.LogisticRegression"]], "randomforestclassifier (class in ml_library.models.random_forest)": [[4, "ml_library.models.random_forest.RandomForestClassifier"]], "randomforestregressor (class in ml_library.models.random_forest)": [[4, "ml_library.models.random_forest.RandomForestRegressor"]], "svmclassifier (class in ml_library.models.svm_models)": [[4, "ml_library.models.svm_models.SVMClassifier"]], "svmregressor (class in ml_library.models.svm_models)": [[4, "ml_library.models.svm_models.SVMRegressor"]], "xgboostclassifier (class in ml_library.models.xgboost_models)": [[4, "ml_library.models.xgboost_models.XGBoostClassifier"]], "xgboostregressor (class in ml_library.models.xgboost_models)": [[4, "ml_library.models.xgboost_models.XGBoostRegressor"]], "check_is_fitted() (ml_library.models.base.basemodel method)": [[4, "ml_library.models.base.BaseModel.check_is_fitted"]], "fit() (ml_library.models.base.basemodel method)": [[4, "ml_library.models.base.BaseModel.fit"]], "fit() (ml_library.models.classification.logisticregression method)": [[4, "ml_library.models.classification.LogisticRegression.fit"]], "fit() (ml_library.models.knn_models.knnclassifier method)": [[4, "ml_library.models.knn_models.KNNClassifier.fit"]], "fit() (ml_library.models.knn_models.knnregressor method)": [[4, "ml_library.models.knn_models.KNNRegressor.fit"]], "fit() (ml_library.models.random_forest.randomforestclassifier method)": [[4, "ml_library.models.random_forest.RandomForestClassifier.fit"]], "fit() (ml_library.models.random_forest.randomforestregressor method)": [[4, "ml_library.models.random_forest.RandomForestRegressor.fit"]], "fit() (ml_library.models.regression.linearregression method)": [[4, "ml_library.models.regression.LinearRegression.fit"]], "fit() (ml_library.models.svm_models.svmclassifier method)": [[4, "ml_library.models.svm_models.SVMClassifier.fit"]], "fit() (ml_library.models.svm_models.svmregressor method)": [[4, "ml_library.models.svm_models.SVMRegressor.fit"]], "fit() (ml_library.models.tree_models.decisiontreeclassifier method)": [[4, "ml_library.models.tree_models.DecisionTreeClassifier.fit"]], "fit() (ml_library.models.tree_models.decisiontreeregressor method)": [[4, "ml_library.models.tree_models.DecisionTreeRegressor.fit"]], "fit() (ml_library.models.xgboost_models.xgboostclassifier method)": [[4, "ml_library.models.xgboost_models.XGBoostClassifier.fit"]], "fit() (ml_library.models.xgboost_models.xgboostregressor method)": [[4, "ml_library.models.xgboost_models.XGBoostRegressor.fit"]], "get_params() (ml_library.models.base.basemodel method)": [[4, "ml_library.models.base.BaseModel.get_params"]], "get_params() (ml_library.models.classification.logisticregression method)": [[4, "ml_library.models.classification.LogisticRegression.get_params"]], "get_params() (ml_library.models.knn_models.knnclassifier method)": [[4, "ml_library.models.knn_models.KNNClassifier.get_params"]], "get_params() (ml_library.models.knn_models.knnregressor method)": [[4, "ml_library.models.knn_models.KNNRegressor.get_params"]], "get_params() (ml_library.models.random_forest.randomforestclassifier method)": [[4, "ml_library.models.random_forest.RandomForestClassifier.get_params"]], "get_params() (ml_library.models.random_forest.randomforestregressor method)": [[4, "ml_library.models.random_forest.RandomForestRegressor.get_params"]], "get_params() (ml_library.models.regression.linearregression method)": [[4, "ml_library.models.regression.LinearRegression.get_params"]], "get_params() (ml_library.models.svm_models.svmclassifier method)": [[4, "ml_library.models.svm_models.SVMClassifier.get_params"]], "get_params() (ml_library.models.svm_models.svmregressor method)": [[4, "ml_library.models.svm_models.SVMRegressor.get_params"]], "get_params() (ml_library.models.tree_models.decisiontreeclassifier method)": [[4, "ml_library.models.tree_models.DecisionTreeClassifier.get_params"]], "get_params() (ml_library.models.tree_models.decisiontreeregressor method)": [[4, "ml_library.models.tree_models.DecisionTreeRegressor.get_params"]], "get_params() (ml_library.models.xgboost_models.xgboostclassifier method)": [[4, "ml_library.models.xgboost_models.XGBoostClassifier.get_params"]], "get_params() (ml_library.models.xgboost_models.xgboostregressor method)": [[4, "ml_library.models.xgboost_models.XGBoostRegressor.get_params"]], "load() (ml_library.models.base.basemodel class method)": [[4, "ml_library.models.base.BaseModel.load"]], "ml_library.models.base": [[4, "module-ml_library.models.base"]], "ml_library.models.classification": [[4, "module-ml_library.models.classification"]], "ml_library.models.knn_models": [[4, "module-ml_library.models.knn_models"]], "ml_library.models.random_forest": [[4, "module-ml_library.models.random_forest"]], "ml_library.models.regression": [[4, "module-ml_library.models.regression"]], "ml_library.models.svm_models": [[4, "module-ml_library.models.svm_models"]], "ml_library.models.tree_models": [[4, "module-ml_library.models.tree_models"]], "ml_library.models.xgboost_models": [[4, "module-ml_library.models.xgboost_models"]], "predict() (ml_library.models.base.basemodel method)": [[4, "ml_library.models.base.BaseModel.predict"]], "predict() (ml_library.models.classification.logisticregression method)": [[4, "ml_library.models.classification.LogisticRegression.predict"]], "predict() (ml_library.models.knn_models.knnclassifier method)": [[4, "ml_library.models.knn_models.KNNClassifier.predict"]], "predict() (ml_library.models.knn_models.knnregressor method)": [[4, "ml_library.models.knn_models.KNNRegressor.predict"]], "predict() (ml_library.models.random_forest.randomforestclassifier method)": [[4, "ml_library.models.random_forest.RandomForestClassifier.predict"]], "predict() (ml_library.models.random_forest.randomforestregressor method)": [[4, "ml_library.models.random_forest.RandomForestRegressor.predict"]], "predict() (ml_library.models.regression.linearregression method)": [[4, "ml_library.models.regression.LinearRegression.predict"]], "predict() (ml_library.models.svm_models.svmclassifier method)": [[4, "ml_library.models.svm_models.SVMClassifier.predict"]], "predict() (ml_library.models.svm_models.svmregressor method)": [[4, "ml_library.models.svm_models.SVMRegressor.predict"]], "predict() (ml_library.models.tree_models.decisiontreeclassifier method)": [[4, "ml_library.models.tree_models.DecisionTreeClassifier.predict"]], "predict() (ml_library.models.tree_models.decisiontreeregressor method)": [[4, "ml_library.models.tree_models.DecisionTreeRegressor.predict"]], "predict() (ml_library.models.xgboost_models.xgboostclassifier method)": [[4, "ml_library.models.xgboost_models.XGBoostClassifier.predict"]], "predict() (ml_library.models.xgboost_models.xgboostregressor method)": [[4, "ml_library.models.xgboost_models.XGBoostRegressor.predict"]], "predict_proba() (ml_library.models.classification.logisticregression method)": [[4, "ml_library.models.classification.LogisticRegression.predict_proba"]], "predict_proba() (ml_library.models.knn_models.knnclassifier method)": [[4, "ml_library.models.knn_models.KNNClassifier.predict_proba"]], "predict_proba() (ml_library.models.random_forest.randomforestclassifier method)": [[4, "ml_library.models.random_forest.RandomForestClassifier.predict_proba"]], "predict_proba() (ml_library.models.svm_models.svmclassifier method)": [[4, "ml_library.models.svm_models.SVMClassifier.predict_proba"]], "predict_proba() (ml_library.models.tree_models.decisiontreeclassifier method)": [[4, "ml_library.models.tree_models.DecisionTreeClassifier.predict_proba"]], "predict_proba() (ml_library.models.xgboost_models.xgboostclassifier method)": [[4, "ml_library.models.xgboost_models.XGBoostClassifier.predict_proba"]], "save() (ml_library.models.base.basemodel method)": [[4, "ml_library.models.base.BaseModel.save"]], "score() (ml_library.models.classification.logisticregression method)": [[4, "ml_library.models.classification.LogisticRegression.score"]], "score() (ml_library.models.knn_models.knnclassifier method)": [[4, "ml_library.models.knn_models.KNNClassifier.score"]], "score() (ml_library.models.knn_models.knnregressor method)": [[4, "ml_library.models.knn_models.KNNRegressor.score"]], "score() (ml_library.models.random_forest.randomforestclassifier method)": [[4, "ml_library.models.random_forest.RandomForestClassifier.score"]], "score() (ml_library.models.random_forest.randomforestregressor method)": [[4, "ml_library.models.random_forest.RandomForestRegressor.score"]], "score() (ml_library.models.regression.linearregression method)": [[4, "ml_library.models.regression.LinearRegression.score"]], "score() (ml_library.models.svm_models.svmclassifier method)": [[4, "ml_library.models.svm_models.SVMClassifier.score"]], "score() (ml_library.models.svm_models.svmregressor method)": [[4, "ml_library.models.svm_models.SVMRegressor.score"]], "score() (ml_library.models.tree_models.decisiontreeclassifier method)": [[4, "ml_library.models.tree_models.DecisionTreeClassifier.score"]], "score() (ml_library.models.tree_models.decisiontreeregressor method)": [[4, "ml_library.models.tree_models.DecisionTreeRegressor.score"]], "score() (ml_library.models.xgboost_models.xgboostclassifier method)": [[4, "ml_library.models.xgboost_models.XGBoostClassifier.score"]], "score() (ml_library.models.xgboost_models.xgboostregressor method)": [[4, "ml_library.models.xgboost_models.XGBoostRegressor.score"]], "sigmoid() (in module ml_library.models.classification)": [[4, "ml_library.models.classification.sigmoid"]], "trainer (class in ml_library.training.trainer)": [[5, "ml_library.training.trainer.Trainer"]], "get_metrics() (ml_library.training.trainer.trainer method)": [[5, "ml_library.training.trainer.Trainer.get_metrics"]], "ml_library.training.trainer": [[5, "module-ml_library.training.trainer"]], "train() (ml_library.training.trainer.trainer method)": [[5, "ml_library.training.trainer.Trainer.train"]], "get_logger() (in module ml_library.utils.logger)": [[6, "ml_library.utils.logger.get_logger"]], "ml_library.utils.logger": [[6, "module-ml_library.utils.logger"]], "setup_logger() (in module ml_library.utils.logger)": [[6, "ml_library.utils.logger.setup_logger"]]}})